Group60 BUG LOG

BUG1:
description:
    didn't include the rtc.h and keyboard.h in idt.c correctly
    because we move the file concerning device into a new directory
    so we should use #include devices/keyboard.h instead of just #include keyboard.h

BUG2:
    description
        unmatched type and unmatched name
        
BUG3:
    verlargetextfile.tx was printed without NULL terminated


BUG4:
    forgot to advance buffer on reading the remaining blocks in fs

BUG5:
    use pointer to read from file fill the last bytes with arbitrary values

BUG6: 
    cannot access memory at address 0x8400000 -> -4 to kernel stack 

BUG7:
    use dynamic file_operations in fd causes page fault -> use static

BUG8:
    use buffer ptr in parse func causes page fault -> use static

BUG9:
    tear down stack wrongly

BUG10:
    page shifting is incorrect

BUG11:
    not stop file read correctly so cat just keep reading and printing empty space

BUG12:
    trying to execute more than one process kept resulting in a page fault
    was present since reset paging was trying to reset paging at the wrong virtual address, assumed each program ran at a different virtual address dependent on printed
    only thing needed to be done is reset the phys address to point to the parent's phys address 

BUG13:
    vidmap page set up kept resulting in page faults due to incorrect paging set up 
    occurred due to assumption that vidmap needed to be mapped within user space 
    fixed by setting it outside user space (128 MB + 4MB)

BUG14:
    multiple shells couldn't be executed correctly due to setting each shell execution to pid = 0, hence allowing infinite shell executions
    fixed by ensuring each shell execution gets its own process, which is limited by max total processes

BUG15:
    keyboard allowed backspacing of terminal prompts due to terminal_.position (pointer to the lastest position of character entered in the buffer) remaining at 0
    resulting in backspacing always being allowed due to condition in terminal_remove_from_buffer being >=0
    fixed by modifying logic of terminal_.position and fixing boundary conditions within terminal_remove_from_buffer

BUG16:
    keyboard allowed printing of more than 128 characters, 
    fixed by allowing characters to print until 128 characters reached,
    once 127 characters reached, enter forcibly added to the terminal buffer, resulting in a terminal read, which clears the buffer and allows continued typing

BUG17:
    backspacing kept printing a space to the terminal buffer when pressed, fixed by adding a special check for backspace which didn't do a putc

BUG18:
    trying to putc null characters caused it to print incorrect characters. Fixed by only doing putc for non null characters

BUG19:
    forgetting to flush tlb when setting up paging for multiple terminals' video memory. Resulted in incorrect contents being present at the designated locations

BUG20: 
    indices for the terminal video memory were initially mapped to the wrong location, resulting in page faults for trying to access invalid memory

BUG21:
    vertical scrolling bugged since we didn't properly handle the case of a newline character being printed when we reached the bottom right position of the screen. It was first noticed
    in pingpong. Resolved by checking if the character being added to the end was a newline, and if it is, to be handled by the newline case of the putc function

BUG22:
    before switching terminals, we didn't re enable interrupts, so it resulted in no interrupts being generated after switching to a different terminal. Resolved by calling sti as soon
    as we enter the keyboard handler

BUG23:
    terminal init didn't intitialize the positions for each terminal correctly. Resulted in not being able to execute any command once only when we first switched into that terminal

BUG24:
    keyboard was still accepting inputs past 127 characters. Resolved by adding a condition to only update the buffer if it wasn't full

BUG25:
    once the previous change was added, enter would not be recognized once we type 127 characters since we didn't accept any inputs once the buffer was filled. Resolved by handling enter
    as a separate case in the keyboard in which we always update the buffer if enter is pressed

BUG26:
    switching the terminals was overriding the esp and ebp saved within the execute system call. Fixed by adding esp and ebp fields in the terminal struct, which were used to restore context
    before switching 

BUG27:
    we were not saving the context of the previous terminal's program and restoring the context of the current terminal's program's context, resulting in the background programs not halting correctly
    Fixed by adding context switching within the keyboard interrupt handler function


